#pragma once

#include <cstdint>
#include <string>
#include <vector>
#include "dma.hpp"
#include "input.hpp"
#include "cartridge.hpp"


const uint8_t bootDMG[256] = {
	0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
	0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
	0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
	0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
	0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
	0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
	0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
	0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
	0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
	0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
	0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
	0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
	0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
	0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
	0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x00, 0x00, 0x23, 0x7D, 0xFE, 0x34, 0x20,
	0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x00, 0x00, 0x3E, 0x01, 0xE0, 0x50
};

class Memory {
public:
	Memory() {
		std::fill(std::begin(vram), std::end(vram), 0);
		std::fill(std::begin(ram), std::end(ram), 0);
		std::fill(std::begin(wram), std::end(wram), 0);
		std::fill(std::begin(oam), std::end(oam), 0);
		std::fill(std::begin(io_registers), std::end(io_registers), 0);
		std::fill(std::begin(hram), std::end(hram), 0);
		serialBuffer.clear();

		interrupt_enable = 0;
		reset();
	};
	enum Interrupt : uint8_t {
		INT_VBLANK = 0x01,
		INT_STAT = 0x02,
		INT_TIMER = 0x04,
		INT_SERIAL = 0x08,
		INT_JOYPAD = 0x10
	};
	uint8_t read(uint16_t address) const;
	void write(uint16_t address, uint8_t value);
	bool loadROM(const std::string& filename);
	inline void requestInterrupt(uint8_t mask)
	{
		// IF is I/O register index 0x0F within 0xFF00-0xFF7F
		io_registers[0x0F] |= mask & 0x1F;   // mask off unused bits 5-7
	};

	bool oamBlocked = false;

	std::vector<char> serialBuffer;
	uint8_t io_registers[0x80];     // 128 bytes of I/O

	uint8_t* oamPtr() { return oam; }

	DMA dma;				// DMA transfer state
	Input input;
	Cartridge cartridge;

private:
	void reset();




	std::vector<uint8_t> rom;       // Loaded cartridge ROM
	uint8_t vram[0x2000];           // 8KB Video RAM
	uint8_t ram[0x2000];            // 8KB External RAM
	uint8_t wram[0x2000];           // 8KB Work RAM
	uint8_t oam[0xA0];              // 160 bytes Sprite OAM
	uint8_t hram[0x7F];             // High RAM (127 bytes)
	uint8_t interrupt_enable = 0;   // IE register
};
